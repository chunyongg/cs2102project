----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 8. find_rooms: This routine is used to find all the rooms that could be used for a course session.
-- Inputs: session date, session start hour, and session duration
-- Returns: a table of room identifiers.

CREATE OR REPLACE FUNCTION find_rooms (IN sess_date DATE, IN start_time TIMESTAMP, IN duration INTEGER, OUT room_id INTEGER)
RETURNS SETOF RECORD AS $$
    SELECT DISTINCT room_id
    FROM Rooms R
    EXCEPT
    SELECT DISTINCT C.room_id
    FROM Conducts C
    WHERE C.sess_date = sess_date
    AND NOT EXISTS (
        SELECT DISTINCT C2.room_id
        FROM Conducts C2
        WHERE C2.sess_date = sess_date
        AND C2.end_time <= start_time
        AND C2.start_time >= start_time + duration
    ) -- end before input start_time AND start after input end_time
 $$ LANGUAGE SQL
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 9. get_available_rooms: This routine is used to retrieve the availability information of rooms for a specific duration.
-- Inputs: start date and end date
-- Returns: a table of records consisting of the following information:
-- room identifier, room capacity, day (which is within the input date range [start date, end date]),
-- and an array of the hours that the room is available on the specified day. The output is sorted in ascending order of room identifier and day, and the array entries are sorted in ascending order of hour.

CREATE OR REPLACE FUNCTION get_available_rooms (IN start_date DATE, IN end_date DATE, OUT room_id INT, OUT room_capacity INT, OUT day DATE, OUT hours INT[])
RETURNS SETOF RECORD AS $$
    DECLARE
        day DATE;
    BEGIN
        day := start_date
        LOOP
            EXIT WHEN day > end_date;
            SELECT room_id, seating_capacity, day, hours;
            day := day + 1;
    END;
$$ LANGUAGE SQL
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 11. add_course_package: This routine is used to add a new course package for sale.
-- Inputs: package name, number of free course sessions, start and end date indicating the duration that the promotional package is available for sale, and the price of the package.
-- The course package identifier is generated by the system. If the course package information is valid, the routine will perform the necessary updates to add the new course package.

CREATE OR REPLACE PROCEDURE add_course_package (package_name TEXT, num_free_registrations INT, sale_start_date DATE, sale_end_date DATE, price NUMERIC(10, 2))
AS $$
    INSERT INTO CoursePackages(package_name, num_free_registrations, sale_start_date, sale_end_date, price)
        VALUES (package_name, num_free_registrations, sale_start_date, sale_end_date, price);
$$ LANGUAGE SQL

-- e.g. call add_course_package ('Valentines Day Sales', 2, '2021-02-01', '2021-11-01', 4000);
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 12. get_available_course_packages: This routine is used to retrieve the course packages that are available for sale.
-- Returns: a table of records with the following information for each available course package:
-- package name, number of free course sessions, end date for promotional package, and the price of the package.

CREATE OR REPLACE FUNCTION get_available_course_packages (OUT package_name TEXT, OUT num_free_registrations INT, OUT sale_end_date DATE, OUT price NUMERIC)
RETURNS SETOF RECORD AS $$
    SELECT package_name, num_free_registrations, sale_end_date, price
    FROM CoursePackages
$$ LANGUAGE SQL

-- e.g. select get_available_course_packages()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- F6:
CREATE OR REPLACE FUNCTION find_instructors (
    IN cid INTEGER, IN session_date DATE, IN session_hour INTEGER, 
    OUT emp_id INTEGER, OUT emp_name TEXT)
RETURNS RECORD AS $$
    SELECT emp_id, emp_name
    FROM Employees
    NATURAL JOIN Instructors
    INNER JOIN Sessions
    ON Instructors.emp_id = Sessions.instructor_id 
    WHERE Sessions.course_id = cid
    AND Sessions.sess_date = session_date
    AND session_hour IN (SELECT DATE_PART('hour', Sessions.start_time));
$$ LANGUAGE sql;

-- Testcases:
-- select * from find_instructors(10, '2021-11-01', 14);
-- select * from find_instructors(8, '2021-09-01', 9);
-- select * from find_instructors(8, '2021-10-01', 11);
-- select * from find_instructors(3, '2021-04-01', 11);

-- F7:
-- incomplete (need to add teach hours and avail hour)
CREATE OR REPLACE FUNCTION get_available_instructors (
    IN cid INTEGER, IN s_date DATE, IN e_date DATE,
    OUT emp_id INTEGER, OUT emp_name TEXT) -- teach_hours INTEGER , avail_hours INTEGER ARRAY
RETURNS SETOF RECORD AS $$
    SELECT course_id, start_date, end_date, emp_id, emp_name
    FROM Sessions 
    INNER JOIN Employees
    ON Sessions.instructor_id = Employees.emp_id;
$$ LANGUAGE sql;

-- Testcases:

-- F15:
-- incomplete (need to fix remaining seats)
CREATE OR REPLACE FUNCTION get_available_course_offerings (
    OUT c_title TEXT, OUT c_area TEXT, OUT s_date DATE, OUT e_date DATE, 
    OUT r_deadline DATE, OUT c_fee NUMERIC(10,2), num_remaining INTEGER)
RETURNS SETOF RECORD AS $$
    SELECT title, course_area, start_date, end_date, registration_deadline, fees 
    FROM CourseOfferings
    INNER JOIN Sessions
    ON CourseOfferings.launch_date = Sessions.launch_date
    INNER JOIN Courses
    ON CourseOfferings.course_id = Courses.course_id
    ORDER BY (registration_deadline, title);
$$ LANGUAGE sql;

-- Testcases:
-- select * from get_available_course_offerings

-- F16:
-- incomplete (need to fix remaining seats)
CREATE OR REPLACE FUNCTION get_available_course_sessions (
    OUT session_date DATE, OUT session_hour INTEGER, OUT inst_name TEXT, OUT seat_remaining INTEGER)
RETURNS SETOF RECORD AS $$
    WITH RegistrationCount AS (
        SELECT COUNT(*) AS registered FROM Registers
        GROUP BY sess_id
    ), RemainingSeats AS (
        SELECT (seating_capacity - registered) AS remaining
        FROM CourseOfferings
        INNER JOIN RegistrationCount
        ON CourseOfferings.sess_id = RegistrationCount.sess_id
        GROUP BY sess_id
    )
    SELECT sess_date, DATE_PART('hour', start_time), emp_name, remaining
    FROM Sessions
    INNER JOIN Employees
	ON Sessions.instructor_id = Employees.emp_id
    NATURAL JOIN RemainingSeats
    ORDER BY (sess_date, DATE_PART('hour', start_time));
$$ LANGUAGE sql;

-- Testcases:
-- select * from get_available_course_sessions

-- F21
-- Works but I think need to add sth like ensure instructor updated is of course area
CREATE OR REPLACE PROCEDURE update_instructor (
    l_date DATE, cid INTEGER, s_num INTEGER, emp_id INTEGER
)
AS $$
    UPDATE Sessions
    SET instructor_id = emp_id
    WHERE launch_date = l_date
    AND course_id = cid
    AND sess_num = s_num;
$$ LANGUAGE SQL

-- Testcases:
-- select * from update_instructor('2021-10-01', 10, 3, 30)

-- F22
-- Current tables have to be updated to support this
CREATE OR REPLACE PROCEDURE update_room (
    cid INTEGER, s_num INTEGER, rid INTEGER
)
AS $$
    --UPDATE ???
    --SET ???.room_id = rid
$$ LANGUAGE SQL