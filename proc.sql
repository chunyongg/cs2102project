-- RUIEY's FUNCTIONS
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 8. find_rooms: This routine is used to find all the rooms that could be used for a course session.
-- Inputs: session date, session start hour, and session duration
-- Returns: a table of room identifiers.

CREATE OR REPLACE FUNCTION find_rooms (IN sess_date DATE, IN start_time TIMESTAMP, IN duration INTEGER, OUT room_id INTEGER)
RETURNS SETOF RECORD AS $$
    SELECT room_id FROM ROOMS R 
    WHERE NOT EXISTS (
        SELECT 1 FROM Conducts C
        WHERE C.roomid = R.roomid 
        AND C.start_time >= start_time + duration 
        AND C.end_time <= start_time
    ) -- does not: start after input end_time AND end before input start_time
 $$ LANGUAGE SQL
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 9. get_available_rooms: This routine is used to retrieve the availability information of rooms for a specific duration.
-- Inputs: start date and end date
-- Returns: a table of records consisting of the following information:
-- room identifier, room capacity, day (which is within the input date range [start date, end date]), and an array of the hours that the room is available on the specified day.
-- The output is sorted in ascending order of room identifier and day, and the array entries are sorted in ascending order of hour.

CREATE OR REPLACE FUNCTION get_available_rooms (IN start_date DATE, IN end_date DATE, OUT room_id INT, OUT room_capacity INT, OUT day DATE, OUT hours INT[])
RETURNS SETOF RECORD AS $$
    DECLARE
        day DATE;
    BEGIN
        day := start_date
        LOOP
            EXIT WHEN day > end_date;
            SELECT room_id, seating_capacity, day, hours;
            day := day + 1;
    END;
$$ LANGUAGE SQL
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 11. add_course_package: This routine is used to add a new course package for sale.
-- Inputs: package name, number of free course sessions, start and end date indicating the duration that the promotional package is available for sale, and the price of the package.
-- The course package identifier is generated by the system. If the course package information is valid, the routine will perform the necessary updates to add the new course package.

CREATE OR REPLACE PROCEDURE add_course_package (package_name TEXT, num_free_registrations INT, sale_start_date DATE, sale_end_date DATE, price NUMERIC(10, 2))
AS $$
    INSERT INTO CoursePackages(package_name, num_free_registrations, sale_start_date, sale_end_date, price)
        VALUES (package_name, num_free_registrations, sale_start_date, sale_end_date, price);
$$ LANGUAGE SQL

-- e.g. call add_course_package ('Valentines Day Sales', 2, '2021-02-01', '2021-11-01', 4000);
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 12. get_available_course_packages: This routine is used to retrieve the course packages that are available for sale.
-- Returns: a table of records with the following information for each available course package:
-- package name, number of free course sessions, end date for promotional package, and the price of the package.

CREATE OR REPLACE FUNCTION get_available_course_packages (OUT package_name TEXT, OUT num_free_registrations INT, OUT sale_end_date DATE, OUT price NUMERIC)
RETURNS SETOF RECORD AS $$
    SELECT package_name, num_free_registrations, sale_end_date, price
    FROM CoursePackages
$$ LANGUAGE SQL

-- e.g. select get_available_course_packages()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 17. register_session: This routine is used when a customer requests to register for a session in a course offering.
-- Inputs: customer identifier, course offering identifier, session number, and payment method (credit card or redemption from active package).
-- If the registration transaction is valid, this routine will process the registration with the necessary updates (e.g., payment/redemption).

CREATE OR REPLACE PROCEDURE register_session (cust_id INT, offer_id INT, sess_num INT, payment_method TEXT)
AS $$
$$ LANGUAGE SQL
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 18. get_my_registrations: This routine is used when a customer requests to view his/her active course registrations (i.e, registrations for course sessions that have not ended).
-- Inputs: a customer identifier
-- Returns: a table of records with the following information for each active registration session:
-- course name, course fees, session date, session start hour, session duration, and instructor name.
-- The output is sorted in ascending order of session date and session start hour.

CREATE OR REPLACE FUNCTION get_my_registrations (IN cust_id INT, OUT title TEXT, OUT fees INT, OUT sess_date DATE, OUT start_hour INT, OUT duration INT, OUT emp_name TEXT)
RETURNS SETOF RECORD AS $$
$$ LANGUAGE SQL
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
